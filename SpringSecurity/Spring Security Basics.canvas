{
	"nodes":[
		{"id":"a10c2e1d10091334","type":"text","text":"Authentication","x":-140,"y":-3400,"width":250,"height":60,"color":"1"},
		{"id":"95363b1ef47f3ba8","type":"text","text":"Authorization","x":195,"y":-3400,"width":250,"height":60,"color":"6"},
		{"id":"f81fc880b025f823","type":"text","text":"Filter","x":495,"y":-3400,"width":250,"height":60,"color":"4"},
		{"id":"95c3f4da08803a8e","type":"text","text":"## Important Terminologies in Spring Security","x":20,"y":-3560,"width":600,"height":60,"color":"2"},
		{"id":"169a527da7cd1bef","type":"text","text":"\n| Authentication Type | Explanation                                                                                        |\n| ------------------- | -------------------------------------------------------------------------------------------------- |\n| Login Form          | A form in which user enters the username and password                                              |\n| HTTP                | Request has headers in which username and password is present                                      |\n| Custom              | Developers can use custom authentication logic using AuthenticationProvider and UserDetailsService |\n| Passkey             | Cryptographic keys are used instead of passwords                                                   |\n| One-Time            | Used for sensitive operations on temporary basis                                                   |\n","x":-440,"y":-3260,"width":400,"height":500,"color":"1"},
		{"id":"ff46f3f333104fa9","type":"text","text":"\n| Filter Types                           | Explanation                                                                            |\n| -------------------------------------- | -------------------------------------------------------------------------------------- |\n| Authentication Filter                  | This checks user permissions before allowing access to requested resources.            |\n| CSRF Protection Filter                 | It prevents cross-site request forgery (CSRF) attacks by validating request tokens.    |\n| Session Management Filter              | It protects against session fixation attacks by enforcing secure session handling.     |\n| Refreshable SAML 2.0 Asserting Parties | This enhances SAML 2.0 authentication by supporting dynamic metadata updates           |\n| Security Observations for Filter Chain | This introduces monitoring capabilities to track security events and filter execution. |\n","x":620,"y":-3260,"width":540,"height":500,"color":"4"},
		{"id":"e3cb940eb14db69e","type":"text","text":"\n| Authorization Types                | Explanation                                                                                                 |\n| ---------------------------------- | ----------------------------------------------------------------------------------------------------------- |\n| Access control for URLs            | It restricts access to specific resources based on user roles using Spring Security’s requestMatchers() API |\n| Secure objects and Methods         | This uses annotations like @PreAuthorize and @PostAuthorize to enforce security at the method level.        |\n| Access Control Lists (ACLs)        | It defines permissions for specific users and roles, providing fine-grained authorization control.          |\n| Simplified OAuth 2.0 Configuration | It improves integration with third-party login providers like Google, GitHub, and Microsoft.                |\n| New Method Security Annotations    | This introduces enhanced annotations to enforce role-based security policies at the method level.           |\n","x":20,"y":-3260,"width":560,"height":500,"color":"6"},
		{"id":"d115b602dc794491","type":"text","text":"Authentication is furthermore divided into three main sections :\n- You can access the password\n- You cant access the password\n- Through Oauth2 i.e. authenticating through google,facebook e.t.c (Completely different scenario)","x":-440,"y":-2700,"width":400,"height":320,"color":"1"},
		{"id":"992110fc4d01a886","type":"text","text":"**First Scenario is when you can access the passwords:**\nThis scenario is useful when you have the user details stored in the database.\n- In this you have to provide the implementation of two basic interfaces (both are interfaces of spring security you have to provide your own implementation for the two):\n\t- **PasswordEncoder**\n\t- **UserDetailsService**","x":-620,"y":-2280,"width":320,"height":400,"color":"3"},
		{"id":"6e6c6b841db2c85a","type":"text","text":"**Second scenario is when you dont have the username and password stored with you:**\nIn this scenario you have to implement : \n- **AuthenticationProvider**","x":-220,"y":-2280,"width":280,"height":400,"color":"2"},
		{"id":"323696ebb88cc0a9","type":"text","text":"Extract the username/password combination from the HTTP Basic Auth header in a filter. You don’t have to do anything for that, it will happen under the hood.","x":-620,"y":-1840,"width":400,"height":120,"color":"3"},
		{"id":"dcd09ef4f8ba91cd","type":"text","text":"Call _your_ MyDatabaseUserDetailsService to load the corresponding user from the database, wrapped as a UserDetails object, which exposes the user’s hashed password.","x":-620,"y":-1680,"width":400,"height":140,"color":"3"},
		{"id":"67e8d21d5b6e4da3","type":"text","text":"Take the extracted password from the HTTP Basic Auth header, hash it _automatically_ and compare it with the hashed password from your UserDetails object. If both match, the user is successfully authenticated.","x":-620,"y":-1500,"width":400,"height":160,"color":"3"},
		{"id":"210126f7a03f22ca","type":"text","text":"Spring Security cannot magically guess your preferred password hashing algorithm. That’s why you need to specify another @Bean, a _PasswordEncoder_. If you want to, say, use the BCrypt password hashing function (Spring Security’s default) for _all your passwords_, you would specify this @Bean in your SecurityConfig.","x":-1180,"y":-1680,"width":460,"height":180,"color":"1"},
		{"id":"029d5f008951b851","type":"text","text":"What if you have _multiple_ password hashing algorithms, because you have some legacy users whose passwords were stored with MD5 (don’t do this), and newer ones with Bcrypt or even a third algorithm like SHA-256? Then you would use the following encoder:","x":-1620,"y":-1810,"width":420,"height":200,"color":"1"},
		{"id":"6cdfa391a870b9d8","type":"text","text":"Solution: How does this delegating encoder work? It will look at the UserDetail’s hashed password (coming from e.g. your database table), which now has to start with a `_{prefix}_`. That prefix, is your hashing method! Your database table would then look like this:","x":-1640,"y":-1530,"width":440,"height":190,"color":"4"},
		{"id":"499f8a51d7be9a39","type":"text","text":"|   |   |   |\n|---|---|---|\n|username|password||\n|[john@doe.com](mailto:john@doe.com)|{bcrypt}$2y$12$6t86Rpr3llMANhCUt26oUen2WhvXr/A89Xo9zJion8W7gWgZ/zA0C||\n|[my@user.com](mailto:my@user.com)|{sha256}5ffa39f5757a0dad5dfada519d02c6b71b61ab1df51b4ed1f3bee|","x":-1820,"y":-1220,"width":800,"height":140,"color":"4"},
		{"id":"feb68116b192100e","type":"text","text":"This has two implications:\n\n1. You do _not have_ the user passwords anymore in your application, as you cannot ask Crowd to just give you those passwords.\n    \n2. You do, however, have a REST API that you can login against, with your username and password. (A POST request to the `_/rest/usermanagement/1/authentication_` REST endpoint).\n    \n\nIf that is the case, you cannot use a UserDetailsService anymore, instead you need to implement and provide an **AuthenticationProvider** @Bean.","x":-140,"y":-1810,"width":700,"height":270,"color":"2"},
		{"id":"66e7aa116fa4932d","type":"text","text":"1. Compared to the UserDetails load() method, where you only had access to the username, you now have access to the complete authentication attempt, _usually_ containing a username and password.\n    \n2. You can do whatever you want to authenticate the user, e.g. call a REST-service.\n    \n3. If authentication failed, you need to throw an exception.\n    \n4. If authentication succeeded, you need to return a fully initialized UsernamePasswordAuthenticationToken. It is an implementation of the Authentication interface and needs to have the field authenticated be set to true (which the constructor used above will automatically set). We’ll cover authorities in the next chapter.","x":-140,"y":-1500,"width":700,"height":280,"color":"2"},
		{"id":"a8481d9e96f74c45","x":-800,"y":-4400,"width":300,"height":520,"color":"3","type":"text","text":"UserDetailsService"},
		{"id":"0dc6606d2de7e2c3","x":-775,"y":-4295,"width":250,"height":60,"type":"text","text":"InMemory UserDetails Manager"},
		{"id":"92e632e0b26b9fe5","x":-775,"y":-4190,"width":250,"height":60,"type":"text","text":"JDBC UserDetails Manager"},
		{"id":"678167124da80080","x":-775,"y":-4080,"width":250,"height":60,"type":"text","text":"LDAP UserDetails Manager"},
		{"id":"0070aefd913bf732","type":"text","text":"Site\n---\n","x":520,"y":-4405,"width":320,"height":160,"color":"6"},
		{"id":"80629df9a47b2115","type":"text","text":"Other Filter 1","x":520,"y":-4190,"width":320,"height":60,"color":"6"},
		{"id":"57ac4cc6b002635b","type":"text","text":"UsernamePasswordAuthenticationFilter","x":520,"y":-4080,"width":360,"height":60,"color":"6"},
		{"id":"4e6a8d1028231d58","type":"text","text":"Other Filter 2","x":520,"y":-3970,"width":360,"height":60,"color":"6"},
		{"id":"e96b0be708459efd","type":"text","text":"Authentication Manager","x":120,"y":-4130,"width":280,"height":240,"color":"5"},
		{"id":"b3717e85a78485fa","type":"text","text":"Provider Manager","x":135,"y":-4020,"width":250,"height":80},
		{"id":"ab06efe6daafa570","type":"text","text":"Password Encoder","x":135,"y":-4430,"width":250,"height":250,"color":"5"},
		{"id":"341a8bce6601f270","type":"text","text":"BCrypt","x":150,"y":-4355,"width":220,"height":50},
		{"id":"d1f60d2e5fcbe7c6","type":"text","text":"Argon2","x":150,"y":-4275,"width":220,"height":50},
		{"id":"1269b8941bff22f7","x":-260,"y":-4425,"width":280,"height":530,"color":"4","type":"text","text":"Providers\n\n"},
		{"id":"20c516b6726afc3c","x":-245,"y":-4335,"width":250,"height":80,"type":"text","text":"Dao Authentication Provider"},
		{"id":"34f62143c1870fa1","x":-245,"y":-4210,"width":250,"height":60,"type":"text","text":"OAuth2Login Authentication Provider"},
		{"id":"958da221e09eb305","x":-245,"y":-4110,"width":250,"height":60,"type":"text","text":"LDAP Authentication Provider"}
	],
	"edges":[
		{"id":"87cbf25c092bba8c","fromNode":"95c3f4da08803a8e","fromSide":"bottom","toNode":"a10c2e1d10091334","toSide":"top"},
		{"id":"3fbc5eda9bb78cba","fromNode":"95c3f4da08803a8e","fromSide":"bottom","toNode":"95363b1ef47f3ba8","toSide":"top"},
		{"id":"b1e968aa3cc09550","fromNode":"95c3f4da08803a8e","fromSide":"bottom","toNode":"f81fc880b025f823","toSide":"top"},
		{"id":"dfbfd942ba3aadd7","fromNode":"a10c2e1d10091334","fromSide":"bottom","toNode":"169a527da7cd1bef","toSide":"top"},
		{"id":"4ad87a3b8920ca8d","fromNode":"95363b1ef47f3ba8","fromSide":"bottom","toNode":"e3cb940eb14db69e","toSide":"top"},
		{"id":"6347e8b17c3156e2","fromNode":"f81fc880b025f823","fromSide":"bottom","toNode":"ff46f3f333104fa9","toSide":"top"},
		{"id":"3de3a925ee9b3c7b","fromNode":"169a527da7cd1bef","fromSide":"bottom","toNode":"d115b602dc794491","toSide":"top"},
		{"id":"d0d1848d1f8d13ad","fromNode":"d115b602dc794491","fromSide":"bottom","toNode":"992110fc4d01a886","toSide":"top"},
		{"id":"fe128f6d303ae41c","fromNode":"d115b602dc794491","fromSide":"bottom","toNode":"6e6c6b841db2c85a","toSide":"top"},
		{"id":"afb95561e2df9e45","fromNode":"992110fc4d01a886","fromSide":"bottom","toNode":"323696ebb88cc0a9","toSide":"top"},
		{"id":"1b24a6c340de7e38","fromNode":"323696ebb88cc0a9","fromSide":"bottom","toNode":"dcd09ef4f8ba91cd","toSide":"top"},
		{"id":"f23b588890391b36","fromNode":"dcd09ef4f8ba91cd","fromSide":"bottom","toNode":"67e8d21d5b6e4da3","toSide":"top"},
		{"id":"1cf0919ab7ad869a","fromNode":"323696ebb88cc0a9","fromSide":"left","toNode":"210126f7a03f22ca","toSide":"top"},
		{"id":"833bc9ced3d02dbc","fromNode":"210126f7a03f22ca","fromSide":"top","toNode":"029d5f008951b851","toSide":"right"},
		{"id":"50b298a524724603","fromNode":"029d5f008951b851","fromSide":"bottom","toNode":"6cdfa391a870b9d8","toSide":"top"},
		{"id":"5adbd6616fe6eb59","fromNode":"6cdfa391a870b9d8","fromSide":"bottom","toNode":"499f8a51d7be9a39","toSide":"top"},
		{"id":"21fb2044db9fc9f5","fromNode":"6e6c6b841db2c85a","fromSide":"bottom","toNode":"feb68116b192100e","toSide":"top"},
		{"id":"2b2072e2b4e25c66","fromNode":"feb68116b192100e","fromSide":"bottom","toNode":"66e7aa116fa4932d","toSide":"top"},
		{"id":"714f9646a777aa28","fromNode":"0070aefd913bf732","fromSide":"bottom","toNode":"80629df9a47b2115","toSide":"top"},
		{"id":"c3d3eaf219cb1ee5","fromNode":"80629df9a47b2115","fromSide":"bottom","toNode":"57ac4cc6b002635b","toSide":"top"},
		{"id":"90d4ed96cc1f6c8a","fromNode":"57ac4cc6b002635b","fromSide":"bottom","toNode":"4e6a8d1028231d58","toSide":"top"},
		{"id":"9c7c3dba006b8fa2","fromNode":"57ac4cc6b002635b","fromSide":"left","toNode":"e96b0be708459efd","toSide":"right"},
		{"id":"47d4a10ce90152d5","fromNode":"e96b0be708459efd","fromSide":"right","toNode":"57ac4cc6b002635b","toSide":"left"},
		{"id":"386b720e59e383d4","fromNode":"e96b0be708459efd","fromSide":"left","toNode":"1269b8941bff22f7","toSide":"right"},
		{"id":"38eaa3d094bf5ea9","fromNode":"1269b8941bff22f7","fromSide":"right","toNode":"e96b0be708459efd","toSide":"left"},
		{"id":"33f977ea257fbe68","fromNode":"1269b8941bff22f7","fromSide":"left","toNode":"a8481d9e96f74c45","toSide":"right","label":"load\nUser\nBy\nUsername"},
		{"id":"976ccd321be9110e","fromNode":"ab06efe6daafa570","fromSide":"left","toNode":"1269b8941bff22f7","toSide":"top"},
		{"id":"fc30332dc830c6ef","fromNode":"a8481d9e96f74c45","fromSide":"bottom","toNode":"1269b8941bff22f7","toSide":"bottom","label":"User Details"}
	]
}